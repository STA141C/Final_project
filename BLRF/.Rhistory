chr = c("A", "B"),
start = c(1, 2),
stringsAsFactors = FALSE
)
cbind(d$chr, d$start)
d
?readr
?cbind
all_result <- NULL
result_ci <- NULL
if(confidence){
if(blrf$attrs$type == "factor"){
lower_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = upper)
if(pretty){
result_ci <- purrr::map2(lower_bound, upper_bound,
~{paste("[", .x, ",", .y, "]")})
result_ci <- as.data.frame(matrix(result_ci,
nrow = nrow(newdata),
dimnames = list(row.names(lower_bound),
colnames(lower_bound))))
} else{
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
colnames(result_ci) <- c(paste0("lwr.", colnames(lower_bound)),
paste0("upr.", colnames(upper_bound)))
}
} else {
lower_bound <- apply(simplify2array(Pres), 1, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1, quantile, prob = upper)
if(pretty){
result_ci <- map2_chr(lower_bound, upper_bound, ~paste("[", .x, ",", .y, "]"))
} else{
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
}
}
all_result <- cbind(ci = result_ci)
}
if(probability){
if(blrf$attrs$type == "numeric"){
warning("No probability avaiable for regression rf, output fitted values")
all_result <- cbind(fit = final_pres, all_result, stringsAsFactors = F)
}
else{
all_result <- cbind(prob = final_pres, all_result, stringsAsFactors = F)
}
} else{
if(blrf$attrs$type == "numeric"){
all_result <- cbind(fit = final_pres, all_result, stringsAsFactors = F)
} else {
all_result <- cbind(fit = final_label, all_result, stringsAsFactors = F)
}
}
all_result
all_result <- NULL
result_ci <- NULL
if(confidence){
if(blrf$attrs$type == "factor"){
lower_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = upper)
if(pretty){
result_ci <- purrr::map2(lower_bound, upper_bound,
~{paste("[", .x, ",", .y, "]")})
result_ci <- as.data.frame(matrix(result_ci,
nrow = nrow(newdata),
dimnames = list(row.names(lower_bound),
colnames(lower_bound))))
} else{
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
colnames(result_ci) <- c(paste0("lwr.", colnames(lower_bound)),
paste0("upr.", colnames(upper_bound)))
}
} else {
lower_bound <- apply(simplify2array(Pres), 1, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1, quantile, prob = upper)
if(pretty){
result_ci <- map2_chr(lower_bound, upper_bound, ~paste("[", .x, ",", .y, "]"))
} else{
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
}
}
all_result <- cbind(ci = result_ci)
}
if(probability){
if(blrf$attrs$type == "numeric"){
warning("No probability avaiable for regression rf, output fitted values")
all_result <- cbind(fit = final_pres, all_result)
}
else{
all_result <- cbind(prob = final_pres, all_result)
}
} else{
if(blrf$attrs$type == "numeric"){
all_result <- cbind(fit = final_pres, all_result)
} else {
all_result <- cbind(fit = final_label, all_result)
}
}
all_result
all_result <- NULL
result_ci <- NULL
if(confidence){
if(blrf$attrs$type == "factor"){
lower_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = upper)
if(pretty){
result_ci <- purrr::map2(lower_bound, upper_bound,
~{paste("[", .x, ",", .y, "]")})
result_ci <- as.data.frame(matrix(result_ci,
nrow = nrow(newdata),
dimnames = list(row.names(lower_bound),
colnames(lower_bound))))
} else{
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
colnames(result_ci) <- c(paste0("lwr.", colnames(lower_bound)),
paste0("upr.", colnames(upper_bound)))
}
} else {
lower_bound <- apply(simplify2array(Pres), 1, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1, quantile, prob = upper)
# result_ci <- map2_chr(lower_bound, upper_bound, ~paste("[", .x, ",", .y, "]"))
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
}
all_result <- cbind(ci = result_ci)
}
if(probability){
if(blrf$attrs$type == "numeric"){
warning("No probability avaiable for regression rf, output fitted values")
all_result <- cbind(fit = final_pres, all_result)
}
else{
all_result <- cbind(prob = final_pres, all_result)
}
} else{
if(blrf$attrs$type == "numeric"){
all_result <- cbind(fit = final_pres, all_result)
} else {
all_result <- cbind(fit = final_label, all_result)
}
}
if(blrf$attrs$type == "factor" & confidence & probability & !pretty){
all_result <- all_result[, unlist(purrr::map(1:n_v, ~c(., .+n_v, .+2*n_v)))]
} else if(blrf$attrs$type == "factor" & confidence & probability & pretty){
print("h")
all_result <- all_result[, unlist(purrr::map(1:n_v, ~c(., .+n_v)))]
}
all_result
load_all()
tt
tt2
predict.blrf(tt2, mtcars)
load_all()
predict.blrf
load_all()
document()
load_all()
predict.blrf
predict.blrf
remove(predict.blrf)
predict.blrf
predict.blrf(tt2, mtcars)
predict.blrf(tt2, mtcars, confidence = T)
predict.blrf(tt2, mtcars, confidence = T, probability = T)
predict.blrf(tt2, mtcars, confidence = T, probability = F, pretty = )
predict.blrf(tt2, mtcars, confidence = T, probability = F, pretty = T)
load_all()
document()
load_all()
predict.blrf(tt2, mtcars, confidence = T, probability = F, pretty = T)
predict.blrf
load_all()
predict.blrf(tt2, mtcars, confidence = T, probability = F, pretty = T)
load_all()
predict.blrf(tt2, mtcars, confidence = T, probability = F, pretty = T)
document()
use_r("residual_ci")
load_all()
predict.blrf(tt2, mtcars, confidence = T, probability = F, pretty = T)
load_all()
predict.blrf(tt2, mtcars, confidence = T, probability = F, pretty = T)
predict.blrf(tt, iris, confidence = T, probability = F, pretty = T)
predict.blrf(tt, iris, confidence = T, probability = T, pretty = T)
newdata <- iris
blrf <- tt
Trees <- blrf$Trees
Pres <- purrr::map(Trees, ~predict(., newdata))
final_pres <- purrr::reduce(Pres, `+`)/length(Trees)
final_pres
n_v <- colnames(final_pres)
n_v
load_all()
predict.blrf(tt, iris, confidence = T, probability = F, pretty = T)
predict.blrf(tt, iris, confidence = T, probability = T, pretty = T)
c <- predict.blrf(tt, iris, confidence = T, probability = T, pretty = T)
c[1,]
c[1,2]
load_all()
predict.blrf(tt2, mtcars, confidence = T, probability = T, pretty = T)
c <- predict.blrf(tt2, mtcars, confidence = T, probability = T, pretty = T)
c[1,2]
load_all()
predict.blrf(tt2, mtcars, confidence = T, probability = T, pretty = T)
newdata
newdata <- mtcars
blrf <- tt2
predict_check_input(blrf, confidence, probability, pretty, lower, upper)
Trees <- blrf$Trees
Pres <- purrr::map(Trees, ~predict(., newdata))
final_pres <- purrr::reduce(Pres, `+`)/length(Trees)
#cat y and label
if(blrf$attrs$type == "factor" && !probability){
final_label <- as.numeric(apply(final_pres, 1, which.max))
final_label <- (colnames(final_pres))[final_label]
}
all_result <- NULL
result_ci <- NULL
if(confidence){
if(blrf$attrs$type == "factor"){
lower_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = upper)
if(pretty){
result_ci <- purrr::map2(lower_bound, upper_bound,
~{paste("[", .x, ",", .y, "]")})
result_ci <- as.data.frame(matrix(result_ci,
nrow = nrow(newdata),
dimnames = list(row.names(lower_bound),
colnames(lower_bound))))
} else{
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
colnames(result_ci) <- c(paste0("lwr.", colnames(lower_bound)),
paste0("upr.", colnames(upper_bound)))
}
} else {
lower_bound <- apply(simplify2array(Pres), 1, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1, quantile, prob = upper)
if(pretty){
result_ci <- map2_chr(lower_bound, upper_bound, ~paste("[", .x, ",", .y, "]"))
}
else{
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
}
}
all_result <- cbind(ci = result_ci)
}
all_result
if(probability){
if(blrf$attrs$type == "numeric"){
warning("No probability avaiable for regression rf, output fitted values")
all_result <- cbind(fit = final_pres, all_result)
}
else{
all_result <- cbind(prob = final_pres, all_result)
}
} else{
if(blrf$attrs$type == "numeric"){
all_result <- cbind(fit = final_pres, all_result)
} else {
all_result <- cbind(fit = final_label, all_result)
}
}
all_result
all_result <- NULL
result_ci <- NULL
if(confidence){
if(blrf$attrs$type == "factor"){
lower_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = upper)
if(pretty){
result_ci <- purrr::map2(lower_bound, upper_bound,
~{paste("[", .x, ",", .y, "]")})
result_ci <- as.data.frame(matrix(result_ci,
nrow = nrow(newdata),
dimnames = list(row.names(lower_bound),
colnames(lower_bound))))
} else{
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
colnames(result_ci) <- c(paste0("lwr.", colnames(lower_bound)),
paste0("upr.", colnames(upper_bound)))
}
} else {
lower_bound <- apply(simplify2array(Pres), 1, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1, quantile, prob = upper)
if(pretty){
result_ci <- map2_chr(lower_bound, upper_bound, ~paste("[", .x, ",", .y, "]"))
}
else{
result_ci <- data.frame(lwr = lower_bound, upr = upper_bound)
}
}
all_result <- cbind(ci = result_ci)
}
all_result
if(probability){
if(blrf$attrs$type == "numeric"){
warning("No probability avaiable for regression rf, output fitted values")
all_result <- cbind(fit = final_pres, all_result)
}
else{
all_result <- cbind(prob = final_pres, all_result)
}
} else{
if(blrf$attrs$type == "numeric"){
all_result <- cbind(fit = final_pres, all_result)
} else {
all_result <- cbind(fit = final_label, all_result)
}
}
all_result
all_result <- NULL
result_ci <- NULL
if(confidence){
if(blrf$attrs$type == "factor"){
lower_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = upper)
if(pretty){
result_ci <- purrr::map2(lower_bound, upper_bound,
~{paste("[", .x, ",", .y, "]")})
result_ci <- as.data.frame(matrix(result_ci,
nrow = nrow(newdata),
dimnames = list(row.names(lower_bound),
colnames(lower_bound))))
} else{
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
colnames(result_ci) <- c(paste0("lwr.", colnames(lower_bound)),
paste0("upr.", colnames(upper_bound)))
}
} else {
lower_bound <- apply(simplify2array(Pres), 1, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1, quantile, prob = upper)
if(pretty){
result_ci <- map2_chr(lower_bound, upper_bound, ~paste("[", .x, ",", .y, "]"))
}
else{
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
}
}
all_result <- cbind.data.frame(ci = result_ci)
}
all_result
all_result[1]
all_result[[1]]
if(probability){
if(blrf$attrs$type == "numeric"){
warning("No probability avaiable for regression rf, output fitted values")
all_result <- cbind(fit = final_pres, all_result)
}
else{
all_result <- cbind(prob = final_pres, all_result)
}
} else{
if(blrf$attrs$type == "numeric"){
all_result <- cbind(fit = final_pres, all_result)
} else {
all_result <- cbind(fit = final_label, all_result)
}
}
all_result[[1]]
all_result
all_result[, 2]
predict_check_input(blrf, confidence, probability, pretty, lower, upper)
Trees <- blrf$Trees
Pres <- purrr::map(Trees, ~predict(., newdata))
final_pres <- purrr::reduce(Pres, `+`)/length(Trees)
#cat y and label
if(blrf$attrs$type == "factor" && !probability){
final_label <- as.numeric(apply(final_pres, 1, which.max))
final_label <- (colnames(final_pres))[final_label]
}
all_result <- NULL
result_ci <- NULL
if(confidence){
if(blrf$attrs$type == "factor"){
lower_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1:2, quantile, prob = upper)
if(pretty){
result_ci <- purrr::map2(lower_bound, upper_bound,
~{paste("[", .x, ",", .y, "]")})
result_ci <- as.data.frame(matrix(result_ci,
nrow = nrow(newdata),
dimnames = list(row.names(lower_bound),
colnames(lower_bound))))
} else{
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
colnames(result_ci) <- c(paste0("lwr.", colnames(lower_bound)),
paste0("upr.", colnames(upper_bound)))
}
} else {
lower_bound <- apply(simplify2array(Pres), 1, quantile, prob = lower)
upper_bound <- apply(simplify2array(Pres), 1, quantile, prob = upper)
if(pretty){
result_ci <- map2_chr(lower_bound, upper_bound, ~paste("[", .x, ",", .y, "]"))
}
else{
result_ci <- cbind(lwr = lower_bound, upr = upper_bound)
}
}
all_result <- cbind.data.frame(ci = result_ci)
}
if(probability){
if(blrf$attrs$type == "numeric"){
warning("No probability avaiable for regression rf, output fitted values")
all_result <- cbind(fit = final_pres, all_result)
}
else{
all_result <- cbind(prob = final_pres, all_result)
}
} else{
if(blrf$attrs$type == "numeric"){
all_result <- cbind(fit = final_pres, all_result)
} else {
all_result <- cbind(fit = final_label, all_result)
}
}
if(blrf$attrs$type == "factor" & confidence & probability & !pretty){
n_v <- length(colnames(final_pres))
all_result <- all_result[, unlist(purrr::map(1:n_v, ~c(., .+n_v, .+2*n_v)))]
} else if(blrf$attrs$type == "factor" & confidence & probability & pretty){
n_v <- length(colnames(final_pres))
all_result <- all_result[, unlist(purrr::map(1:n_v, ~c(., .+n_v)))]
}
all_result
all_result[,2]
predict.blrf(tt2, mtcars, confidence = T, probability = T, pretty = T)
load_all()
predict.blrf(tt2, mtcars, confidence = T, probability = T, pretty = T)
c <- predict.blrf(tt2, mtcars, confidence = T, probability = T, pretty = T)
c[,1]
c[,2]
predict.blrf(tt2, mtcars, confidence = T, probability = T, pretty = T)
predict.blrf(tt, iris, confidence = T, probability = T, pretty = T)
document()
load_all()
predict.blrf(tt, iris, confidence = T, probability = T, pretty = T)
predict.blrf(tt2, mtcars, confidence = T, probability = T, pretty = T)
predict.blrf(tt2, mtcars, confidence = T, probability = T, pretty = T)【，1
predict.blrf(tt2, mtcars, confidence = T, probability = T, pretty = T)[,1]
predict.blrf(tt2, mtcars, confidence = T, probability = T, pretty = T)[,2]
Trees <- blrf$Trees
confusion_matrix_es <- purrr::map(Trees, ~Confusion_one_tree(., data))
accuracy_mean_ci
accuracy_mean_ci(tt, iris,)
accuracy_mean_ci(tt, iris)
blrf <- tt
Trees <- blrf$Trees
confusion_matrix_es <- purrr::map(Trees, ~Confusion_one_tree(., data))
data <- iris
confusion_matrix_es <- purrr::map(Trees, ~Confusion_one_tree(., data))
confusion_matrix_es
blrf <- tt
blrf <- tt2
Trees <- blrf$Trees
Pres <- purrr::map(Trees, ~predict(., newdata))
Pres
purrr::map(Pres, ~{ (. - y)^2})
y <- mtcars$mpg
purrr::map(Pres, ~{ (. - y)^2})
sq_pre <- purrr::map(Pres, ~{ (. - y)^2})
simplify2array(sq_pre)
lower
apply(simplify2array(sq_pre), 1, quantile, lower)
lower_bound <- apply(simplify2array(sq_pre), 1, quantile, lower)
upper_bound <- apply(simplify2array(sq_pre), 1, quantile, upper)
lower_bound
res_ci <- cbind(lwr = lower_bound, upr = upper_bound)
res_ci
class(res_ci)
data
data <- mtcars
data[, as.character(formula[2])]
as.character(formula[2])
Sys.time()
?Sys.time
shiny::runApp('C:/Users/96238/Google Drive/UCDavis/STA 141B/git/final-project')
runApp('C:/Users/96238/Google Drive/UCDavis/STA 141B/git/final-project')
runApp('C:/Users/96238/Google Drive/UCDavis/STA 141B/git/final-project')
document()
load_all()
blrf(mpg~., mtcars, gamma, s, r, n_var)
n_var = 2
gamma
s
r
blrf(mpg~., mtcars, gamma, s, r, n_var)
b <- NULL
blrf(mpg~., mtcars, gamma, s, r, n_var)
data <- mtcars
blrf(mpg~., mtcars, gamma, b, s, r, n_var)
load_all()
blrf(mpg~., mtcars, gamma, b, s, r, n_var)
styler:::style_active_file()
load_all()
blrf(mpg~., mtcars, gamma, b, s, r, n_var)
load_all()
blrf(mpg~., mtcars, gamma, b, s, r, n_var)
blrf$Call
blrf$Call[2]
as.character(Trees$Call[2])
as.character(brlfTrees$Call[2])
as.character(brlf$Trees$Call[2])
as.character(blrf$Trees$Call[2])
blrf$as.character(blrf$Call[2])
as.character(blrf$Call[2])
load_all()
blrf(mpg~., mtcars, gamma, b, s, r, n_var)
source('C:/Users/96238/Google Drive/UCDavis/STA 141B/git/final-project/helpers.R')
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
runApp('C:/Users/96238/Google Drive/UCDavis/STA 141B/git/final-project')
runApp('C:/Users/96238/Google Drive/UCDavis/STA 141B/git/final-project')
runApp('C:/Users/96238/Google Drive/UCDavis/STA 141B/git/final-project')
library(devtools)
document()
